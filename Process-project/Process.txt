1 - Criamos um pasta chamada Project e inicializamos o gerenciado de pacotes
1.1 - npm init -y

2 - Se o nosso package.json conter os pacotes necessários para o projeto, apenas fazemos a instalação dos mesmo através de um comando
2.1 - npm install
2.2 - Se não, utilizamos o npm para intalar os packages necessários

3 - Adicionamos o arquivo .gitignore para que alguns arquivos que não serão uteis sejam enviados ao github

4 - Criamos uma pasta app/assets padrão de projeto

5 - AUTOMATIZAÇÃO JAVASCRIPT: 
    Criamos uma pasta scripts dentro de assents e adicionamos um arquivo JS que iremos trabalhar futuramente.
5.1 - Apos feito isso, instalamos o Webpack para gerenciar nossos arquivos JS (verificar se está no diretório do projeto):
      npm install webpack webpack-cli --save-dev
5.2 - Para usar o webpack, criamos uma pasta na raiz do arquivo Project: webpack.config.js
5.2.1 - Dentro desse arquivos, codamos o que queremos que o webpack faça
    EX: Assista e agrupe qualquer mudança no arquvio JS:
        const path = require('path')

        module.exports = {
            entry: './app/assets/scripts/App.js', //Arquivo que será processado, assistido e agrupado
            output: {
                filename: 'bundled.js', 
                path: path.resolve(__dirname, 'app') //Local aonde será gerado o novo arquivo agrupado
            },
            mode: 'development',
            watch: true
        }
5.3 - Para que possamos fazer o webpack funcionar, rodamos ele através do codigo npm run nomeDoScript
5.4 - O nomeDoScript está defino nos scripts dentro do arquivo package.json
    EX: "scripts": {
            "dev": "webpack",
            "test": "echo \"Error: no test specified\" && exit 1"
        },
        Terminal: npm run dev

6 - AUTOMATIZAÇÃO CSS:
    Criamos uma pasta styles dentro de assents e adicionamos um arquivo CSS que iremos trabalhar futuramente.
6.1 - Apos feito isso, instalamos o gerenciado de CSS para utilizar o webpack (verificar se está no diretório do projeto):
      npm install css-loader style-loader --save-dev
6.2 - Importamos o arquivo CSS para o arquivo JS:
      import '../styles/styles.css'
6.3 - Agora, para utilizarmos dos gerenciados instalados, em webpack.config.js, adicionamos o modulo com suas propriedades:
    EX: const path = require('path')

        module.exports = {
            entry: './app/assets/scripts/App.js', //Arquivo que será processado, assistido e agrupado
            output: {
                filename: 'bundled.js', 
                path: path.resolve(__dirname, 'app') //Local aonde será gerado o novo arquivo agrupado
            },
            mode: 'development',
            watch: true,
            //Configuração do webpack para entender e processar arquivos CSS
            module: {
                rules: [
                    {
                        test: /\.css$/i   //indica que os arquivos que queremos terminam com '.css'
                        use: ['css-loader']         //Aqui, passamos os packages que instalamos para gerenciar o css 
                    }
                ]
            }
        }
6.4 - Após feito isso, instalamos o package postcss para que possamos adicionar plugins para automatizar o código:
        npm install postcss-loader --save-dev
6.4.1 - No arquivo webpack.config.js em module, rules, use, passamos como parametro os parametros do postcss com seus plugins
        const postCSSPlugins = [

        ]
        .
        .
        .
        use: ['style-loader','css-loader', {loader: 'postcss-loader', options: {plugins: postCSSPlugins}}]
6.4.2 - A const postCSSPlugins recebe um vetor com todos os plugins que desejamos utilizar no projeto. Para utilizar-los
        devemos primeiro fazer a instalação dos mesmos:
        EX: npm install postcss-simple-vars --save-dev //Possibilita utilização de variavel
            npm install postcss-nested --save-dev
            npm install autoprefixer --save-dev        //Não é preciso identificar o browser
            npm install postcss-import --save-dev      //Para podermos dividir nosso CSS em modulos e exporta-los para um arquivo só.
            npm install postcss-mixins                 //Para facilitar a utilizaçãode dos @media screen
        OU simplismente: npm install postcss-simple-vars postcss-nested autoprefixer --save-dev
6.4.3 - Após instalado, passa para a const postCSSPlugins os plugins:
        const postCSSPlugins = [
            require('postcss-import'),
            require('postcss-mixins'),
            require('postcss-simple-vars'),
            require('postcss-nested'),
            require('autoprefixer')
        ]
6.5 - Por padrão, o css-loader tentará manipular qualquer imagem que referenciarmos em nosso CSS 
      (por exemplo, imagens de plano de fundo, etc ...). Embora isso seja ótimo em determinadas situações, 
      para desativar isso e gerenciarmos nossos arquivos de imagem manualmente, ao listar 'css-loader' no seu arquivo 
      webpack.config.js, você deverá adicionar uma opção ao final, como este 'css-loader? Url = false'.
6.6 - Após isso, criamos uma pasta chamada modules dentro da pasta styles, onde vamos colocar os modulos separados de cada CSS,
      para que fique mais organizado e visivel o código.
6.7 - Para estilos globais, criamos uma pasta chamada base dentro de styles e criamos um arquivo CSS (normalmente chamado _global.css).
6.7.1 - Desse modo, criamos um novo arquivo para as variaveis que armazenam dados iguais, como cor (normalmente chamado _variables.css)
6.8 - Agora, criaremos um arquivo chamado _mixins.css na pasta styles/base que será utilizada para organizar os @media screen e deixa-los
      globalizados para o nosso projeto.
6.8.1 - Nesse arquivo definimos mixins para o tamanho das telas.
        EX: @define-mixin atSmall {
                @media (min-width: 530px) {
                    @mixin-content;
                }
            }
6.8.2 - Sendo assim, quando quisermos utilizar o @media de 530px em um de nossos elementos da página, é só chamar pelo nome.
        EX: @mixin atSmall {
                font-size: 2.75rem;
            }

7 - AUTOMATIZAÇÃO HTML/CSS/JAVASCRIPT:
    Para que cada alteração que for feita nesses arquivos não tenhamos que dar F5 no browser, criamos um server local
7.1 - Para isso, primeiro temos que baixar o package:
        npm install webpack-dev-server --save-dev
7.2 - Apos isso, no arquivo webpack.config.js adicionamos a propriedade devServer para iniciar o server ao browser
    EX: devServer: {
        //Esse before é incluido para que qualquer mudança no html seja refletida no browser
            before: function(app, server) {
                server._watch('.app/**/*.html') //So primeiros ** são para cada subpasta dentro de app e o segundo * é para cara .html que encontrar
            },
            contentBase: path.join(__dirname, 'app'),
            hot: true,
            port: 3000
        },
        //watch: true, como ativamos o server, o browser ficará olhando para as atualizações, então não precisamos mais dessa função
7.3 - Para que possamos fazer o webpack-server funcionar, rodamos ele através do codigo npm run nomeDoScript
    EX: "scripts": {
            "dev": "webpackwebpack-dev-server",
            "test": "echo \"Error: no test specified\" && exit 1"
        },
        Terminal: npm run dev
7.4 - Para que o nosso JS aceite um modulo hot, precisamos informar no arquivo App.js
    EX: if (module.hto) {
            module.hot.accept()
        }
7.5 - Para que possamos acessar o desenvolvimendo do site por outro dispositivo que esteja conectado a mesma rede, adiconamos a seguinte
      linha na propriedade devServer:
      host: '0.0.0.0'
7.5.1 - Pelo terminal, acesse o IP através do comando ipconfig, anote o IPv. No celular, basta digitar o IPv:3000.

8 - IMAGENS RESPONSIVAS - Utilizamos para melhorar a navegação do site em diferentes dispositivos, não tornar o site lento.
8.1 - Método 1: Direção de arte e situação de corte (picture element)
8.1.2 - Para esse método, utilizamos quando precisamos cortar o tamanho da imagem para diferentes tamanhos de tela
        EX:
        <picture>
            <source srcset="localdaIMGGrande" media="(min-width: 1200px)"> //Para resoluções maiores que 1200px
            <source srcset="localdaIMGMedia" media="(min-width: 760px)">   //Para resoluções maiores que 760px
            <img src="localdaIMGPequena" alt="definição">                  //Para resoluções menores das que definimos
        </picture>
8.2 - Método 2: Resolução de Imagem e Situação do tamanho do arquivo (faster load times)
8.2.1 -  Para esse método, utilizamos quando queremos manter o tamanho da imagem para qualquer tamanho de tela.
        EX: 
        <img srcset="localdaIMGPequena 570w, localdaIMGMedia 1200w, localdaIMGGrande 1920w" alt="definição">
8.3 - Podemos mesclarar as duas para que o browser escolha qual é a melhor imagem para uma certa resolução.
        EX:
        <picture>
            <picture>
                <source srcset="assets/images/hero--large.jpg 1920w, assets/images/hero--large-hi-dpi.jpg 3840w" media="(min-width: 1380px)">
                <source srcset="assets/images/hero--medium.jpg 1380w, assets/images/hero--medium-hi-dpi.jpg 2760w" media="(min-width: 990px)">
                <source srcset="assets/images/hero--small.jpg 990w, assets/images/hero--small-hi-dpi.jpg 1980w" media="(min-width: 640px)">
                <img srcset="assets/images/hero--smaller.jpg 640w, assets/images/hero--smaller-hi-dpi.jpg 1280w" alt="Coastal view of ocean and mountains">
            </picture>
        </picture>
8.4 - Testes de responsividade de IMG: criar img secundária com o valor de pixels escrito, isso serve para os dois modos.

